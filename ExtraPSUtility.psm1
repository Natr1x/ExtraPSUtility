
Function Select-Expand {
    <#
    .SYNOPSIS
    If the -ExpandProperty parameter accepted ScriptBlocks

    .DESCRIPTION
    Runs a ScriptBlock for each InputObject and then expands the ouput with the
    properties of said InputObject similar to how Select-Object -ExpandProperty would.

    .PARAMETER InputObject
    Specifies objects to send to the cmdlet through the pipeline.

    Same as with Select-Object this will be treated as a single object if
    passed as a parameter instead of through the pipeline.

    .PARAMETER ExpandScript
    A script block which's generates output that should be expanded with the
    input.

    The input object will be bound to '$_' in the script.

    .PARAMETER OuterProperty
    Decides which properties from the outer value should be included in the results.

    This does not affect the value of '$_' passed to the ExpandScript.

    .PARAMETER OuterExclude
    Exclude outer value properties from the final result.

    This does not affect the value of '$_' passed to the ExpandScript.

    .PARAMETER OuterName
    Assign the outer values to a property with this given name instead of
    flattening them.

    .PARAMETER InnerName
    Assign the inner values to a property with this given name instead of
    flattening them.

    .EXAMPLE
    PS> class A { $a ; $b ; }
    PS> class B { $c }
    PS> [A]@{ a = "aa"; b = "bb" },[A]@{ a = "AAA"; b = "BBB" } |Select-Expand { 1..5 |% {[B]@{ c = $_ }} }

    a   b   c
    -   -   -
    aa  bb  1
    aa  bb  2
    aa  bb  3
    aa  bb  4
    aa  bb  5
    AAA BBB 1
    AAA BBB 2
    AAA BBB 3
    AAA BBB 4
    AAA BBB 5

    .NOTES
    OriginalAuthor: Natr1x
    OriginalAuthorEmail: osken_o.s@hotmail.com

    .INPUTS
    [PSObject]
    You can pipe objects to this cmdlet.

    .OUTPUTS
    [PSObject]

    Returns the inner objects generated by the script expanded with properties
    of the outer object.

    #>
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [PSObject]$InputObject,

        [Parameter(Mandatory=$true, Position=0)]
        [ScriptBlock]$ExpandScript,

        [Parameter(Mandatory=$false)]
        [SupportsWildcards()]
        [Object[]]$OuterProperty,

        [Parameter(Mandatory=$false)]
        [String[]]$OuterExclude,

        [Parameter(Mandatory=$false)]
        [string]$OuterName,

        [Parameter(Mandatory=$false)]
        [string]$InnerName
    )
    Process {
        [PSVariable[]]$context = [PSVariable]::new('_', $InputObject)
        $outerProp = if ($OuterName) {@{
            n = $OuterName
            e = {
                $InputObject |Select-Object -Property $OuterProperty -ExcludeProperty $OuterExclude
            }
        }} elseif ($OuterProperty)  {
            $OuterProperty
        } else { '*' }

        if ($InnerName) {
            $ExpandScript.InvokeWithContext(@{}, $context, @())
            |Select-Object -Property $outerProp,@{n=$InnerName; e={$_}}
        } else {
            Select-Object -InputObject $InputObject -Property $outerProp,@{n='_tmp_FIM9I0IJTBYVMRDEYY2O'; e={
                $ExpandScript.InvokeWithContext(@{}, $context, @())
            }} -ExcludeProperty $OuterExclude
            |Select-Object -ExcludeProperty '_tmp_FIM9I0IJTBYVMRDEYY2O' -ExpandProperty '_tmp_FIM9I0IJTBYVMRDEYY2O'
        }
    }
}


# Get-CalendarWeek was taken (with permission) from https://getps.dev/blog/get-weekinfo/
function Get-CalendarWeek {
    <#
    .DESCRIPTION
        Gets the current week number based on a specific culture and it's week number descision rules.
    .PARAMETER Date
        Defines the date at which to return the week number for. Defaults to the current date.
    .PARAMETER CultureInfo
        Defines the culture that should be used to calculate the week number. Defaults to se-SV.
    .EXAMPLE
        Get-CalendarWeek
        Get the week number for the current date.
    .EXAMPLE
        Get-CalendarWeek -Date 2018-01-25 -CultureInfo en-US
        Get the week number for the date 2018-01-25 according to the week number calculation rules of the en-US culture.
    .NOTES
        Author: Hannes Palmquist
        AuthorEmail: hannes.palmquist@outlook.com
        COPYRIGHT: Â© 2019, Hannes Palmquist, All Rights Reserved
    #>
    param(
        [datetime]$Date = (Get-Date),
        [string]$CultureInfo = $PSCulture
    )

    # Get specific culture object
    $Culture = [cultureinfo]::GetCultureInfo($CultureInfo)

    # retrieve calendar week
    write-output $Culture.Calendar.GetWeekOfYear($Date, $Culture.DateTimeFormat.CalendarWeekRule, $Culture.DateTimeFormat.FirstDayOfWeek)
}

# Get-WeekInfo was taken (with permission) from https://getps.dev/blog/get-weekinfo/
function Get-WeekInfo {
    <#
    .DESCRIPTION
        Gets info about a specific week
    .PARAMETER Week
        Defines the week number to query
    .PARAMETER Year
        Defines which year to query
    .EXAMPLE
        Get-WeekInfo -Week 5 -Year 1988
        Gets the first date of the fifth week of 1988
    .NOTES
        Author: Hannes Palmquist
        AuthorEmail: hannes.palmquist@outlook.com
        Copyright: (c) 2019, Hannes Palmquist, All Rights Reserved
    #>

    [CmdletBinding()] # Enabled advanced function support
    param(
        [Parameter(Mandatory)][ValidateRange(1, 53)][int]$Week,
        [Parameter(Mandatory)][ValidateRange(1600, 2100)][int]$Year
    )

    BEGIN {
        $WeekHash = [ordered]@{
            Week = $Week
            Year = $Year
        }
    }

    PROCESS {
        $ReferenceDate              = Get-Date -Year $Year -Month 02 -Date 05
        $ReferenceWeek              = Get-CalendarWeek -Date $ReferenceDate
        $WeeksDiff                  = $Week - $ReferenceWeek
        $DateInWeek                 = $ReferenceDate.AddDays($WeeksDiff * 7)
        $WeekHash.FirstDateOfWeek   = $DateInWeek.AddDays(1 - [int]$DateInWeek.DayOfWeek)
        $WeekHash.LastDateOfWeek    = $WeekHash.FirstDateOfWeek.AddDays(7).AddMilliseconds(-1)
        $WeekHash.StartsInMonth     = ([cultureinfo]::GetCultureInfo($PSCulture)).DateTimeFormat.MonthNames[($WeekHash.FirstDateOfWeek).Month-1]
        $WeekHash.EndsInMonth       = ([cultureinfo]::GetCultureInfo($PSCulture)).DateTimeFormat.MonthNames[($WeekHash.LastDateOfWeek).Month-1]
    }

    END {
        Write-Output ([pscustomobject]$WeekHash)
    }
}
