
Function Select-Expand {
    <#
    .SYNOPSIS
    If the -ExpandProperty parameter accepted ScriptBlocks

    .DESCRIPTION
    Runs a ScriptBlock for each InputObject and then expands the ouput with the
    properties of said InputObject similar to how Select-Object -ExpandProperty would.

    .PARAMETER InputObject
    Specifies objects to send to the cmdlet through the pipeline.

    Same as with Select-Object this will be treated as a single object if
    passed as a parameter instead of through the pipeline.

    .PARAMETER ExpandScript
    A script block which's generates output that should be expanded with the
    input.

    The input object will be bound to '$_' in the script.

    .EXAMPLE
    PS> class A { $a ; $b ; }
    PS> class B { $c }
    PS> [A]@{ a = "aa"; b = "bb" },[A]@{ a = "AAA"; b = "BBB" } |Select-Expand { 1..5 |% {[B]@{ c = $_ }} }

    a   b   c
    -   -   -
    aa  bb  1
    aa  bb  2
    aa  bb  3
    aa  bb  4
    aa  bb  5
    AAA BBB 1
    AAA BBB 2
    AAA BBB 3
    AAA BBB 4
    AAA BBB 5

    .NOTES
    OriginalAuthor: Natr1x
    OriginalAuthorEmail: osken_o.s@hotmail.com

    .INPUTS
    [PSObject]
    You can pipe objects to this cmdlet.

    .OUTPUTS
    [PSObject]

    Returns the inner objects generated by the script expanded with properties
    of the outer object.

    #>
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [PSObject]$InputObject,

        [Parameter(Mandatory=$true, Position=0)]
        [ScriptBlock]$ExpandScript
    )
    Process {
        Select-Object -InputObject $InputObject -Property *,@{n='_tmpProp'; e={
            [PSVariable[]]$context = [PSVariable]::new('_', $_)
            $ExpandScript.InvokeWithContext(@{}, $context, @())
        }}|Select-Object -ExcludeProperty '_tmpProp' -ExpandProperty '_tmpProp'
    }
}
